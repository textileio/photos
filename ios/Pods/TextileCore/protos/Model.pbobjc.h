// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Block;
@class Cafe;
@class CafeClient;
@class CafeSession;
@class Contact;
@class Envelope;
@class GPBStruct;
@class GPBTimestamp;
@class Invite;
@class Link;
@class Node;
@class Notification;
@class Peer;
@class Thread;
@class User;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Thread_Type

/** Type controls read (R), annotate (A), and write (W) access */
typedef GPB_ENUM(Thread_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Thread_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** initiator: RAW, members: */
  Thread_Type_Private = 0,

  /** initiator: RAW, members: R */
  Thread_Type_ReadOnly = 1,

  /** initiator: RAW, members: RA */
  Thread_Type_Public = 2,

  /** initiator: RAW, members: RAW */
  Thread_Type_Open = 3,
};

GPBEnumDescriptor *Thread_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Thread_Type_IsValidValue(int32_t value);

#pragma mark - Enum Thread_Sharing

/** Sharing controls if (Y/N) a thread can be shared */
typedef GPB_ENUM(Thread_Sharing) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Thread_Sharing_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** initiator: N, members: N */
  Thread_Sharing_NotShared = 0,

  /** initiator: Y, members: N */
  Thread_Sharing_InviteOnly = 1,

  /** initiator: Y, members: Y */
  Thread_Sharing_Shared = 2,
};

GPBEnumDescriptor *Thread_Sharing_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Thread_Sharing_IsValidValue(int32_t value);

#pragma mark - Enum Thread_State

/** State indicates the loading state */
typedef GPB_ENUM(Thread_State) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Thread_State_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** tail blocks are being loaded */
  Thread_State_LoadingTail = 0,

  /** blocks are all loaded / paused */
  Thread_State_Loaded = 1,

  /** head block is being loaded */
  Thread_State_LoadingHead = 2,
};

GPBEnumDescriptor *Thread_State_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Thread_State_IsValidValue(int32_t value);

#pragma mark - Enum Block_BlockType

typedef GPB_ENUM(Block_BlockType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Block_BlockType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /** block is stored in plaintext, no payload */
  Block_BlockType_Merge = 0,
  Block_BlockType_Ignore = 1,
  Block_BlockType_Flag = 2,
  Block_BlockType_Join = 3,
  Block_BlockType_Announce = 4,

  /** no payload */
  Block_BlockType_Leave = 5,
  Block_BlockType_Text = 6,
  Block_BlockType_Files = 7,
  Block_BlockType_Comment = 8,
  Block_BlockType_Like = 9,
  Block_BlockType_Add = 50,
};

GPBEnumDescriptor *Block_BlockType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Block_BlockType_IsValidValue(int32_t value);

#pragma mark - Enum Notification_Type

typedef GPB_ENUM(Notification_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Notification_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Notification_Type_InviteReceived = 0,
  Notification_Type_AccountPeerJoined = 1,
  Notification_Type_PeerJoined = 2,
  Notification_Type_PeerLeft = 3,
  Notification_Type_MessageAdded = 4,
  Notification_Type_FilesAdded = 5,
  Notification_Type_CommentAdded = 6,
  Notification_Type_LikeAdded = 7,
};

GPBEnumDescriptor *Notification_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Notification_Type_IsValidValue(int32_t value);

#pragma mark - Enum CafeRequest_Type

typedef GPB_ENUM(CafeRequest_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  CafeRequest_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  CafeRequest_Type_Store = 0,
  CafeRequest_Type_Unstore = 3,
  CafeRequest_Type_StoreThread = 1,
  CafeRequest_Type_UnstoreThread = 4,
  CafeRequest_Type_Inbox = 2,
};

GPBEnumDescriptor *CafeRequest_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL CafeRequest_Type_IsValidValue(int32_t value);

#pragma mark - ModelRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface ModelRoot : GPBRootObject
@end

#pragma mark - Peer

typedef GPB_ENUM(Peer_FieldNumber) {
  Peer_FieldNumber_Id_p = 1,
  Peer_FieldNumber_Address = 2,
  Peer_FieldNumber_Name = 3,
  Peer_FieldNumber_Avatar = 4,
  Peer_FieldNumber_InboxesArray = 5,
  Peer_FieldNumber_Created = 6,
  Peer_FieldNumber_Updated = 7,
};

@interface Peer : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Cafe*> *inboxesArray;
/** The number of items in @c inboxesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inboxesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *created;
/** Test to see if @c created has been set. */
@property(nonatomic, readwrite) BOOL hasCreated;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *updated;
/** Test to see if @c updated has been set. */
@property(nonatomic, readwrite) BOOL hasUpdated;

@end

#pragma mark - PeerList

typedef GPB_ENUM(PeerList_FieldNumber) {
  PeerList_FieldNumber_ItemsArray = 1,
};

@interface PeerList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Peer*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - User

typedef GPB_ENUM(User_FieldNumber) {
  User_FieldNumber_Address = 1,
  User_FieldNumber_Name = 2,
  User_FieldNumber_Avatar = 3,
};

@interface User : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

@end

#pragma mark - Contact

typedef GPB_ENUM(Contact_FieldNumber) {
  Contact_FieldNumber_Address = 1,
  Contact_FieldNumber_Name = 2,
  Contact_FieldNumber_Avatar = 3,
  Contact_FieldNumber_PeersArray = 4,
  Contact_FieldNumber_ThreadsArray = 5,
};

@interface Contact : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *avatar;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Peer*> *peersArray;
/** The number of items in @c peersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger peersArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *threadsArray;
/** The number of items in @c threadsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger threadsArray_Count;

@end

#pragma mark - ContactList

typedef GPB_ENUM(ContactList_FieldNumber) {
  ContactList_FieldNumber_ItemsArray = 1,
};

@interface ContactList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Contact*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - Thread

typedef GPB_ENUM(Thread_FieldNumber) {
  Thread_FieldNumber_Id_p = 1,
  Thread_FieldNumber_Key = 2,
  Thread_FieldNumber_Sk = 3,
  Thread_FieldNumber_Name = 4,
  Thread_FieldNumber_Schema = 5,
  Thread_FieldNumber_Initiator = 6,
  Thread_FieldNumber_Type = 7,
  Thread_FieldNumber_Sharing = 8,
  Thread_FieldNumber_MembersArray = 9,
  Thread_FieldNumber_State = 10,
  Thread_FieldNumber_Head = 11,
  Thread_FieldNumber_HeadBlock = 101,
  Thread_FieldNumber_SchemaNode = 102,
  Thread_FieldNumber_BlockCount = 103,
  Thread_FieldNumber_PeerCount = 104,
};

@interface Thread : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@property(nonatomic, readwrite, copy, null_resettable) NSData *sk;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *schema;

@property(nonatomic, readwrite, copy, null_resettable) NSString *initiator;

@property(nonatomic, readwrite) Thread_Type type;

@property(nonatomic, readwrite) Thread_Sharing sharing;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *membersArray;
/** The number of items in @c membersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger membersArray_Count;

@property(nonatomic, readwrite) Thread_State state;

@property(nonatomic, readwrite, copy, null_resettable) NSString *head;

/** view info */
@property(nonatomic, readwrite, strong, null_resettable) Block *headBlock;
/** Test to see if @c headBlock has been set. */
@property(nonatomic, readwrite) BOOL hasHeadBlock;

@property(nonatomic, readwrite, strong, null_resettable) Node *schemaNode;
/** Test to see if @c schemaNode has been set. */
@property(nonatomic, readwrite) BOOL hasSchemaNode;

@property(nonatomic, readwrite) int32_t blockCount;

@property(nonatomic, readwrite) int32_t peerCount;

@end

/**
 * Fetches the raw value of a @c Thread's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Thread_Type_RawValue(Thread *message);
/**
 * Sets the raw value of an @c Thread's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetThread_Type_RawValue(Thread *message, int32_t value);

/**
 * Fetches the raw value of a @c Thread's @c sharing property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Thread_Sharing_RawValue(Thread *message);
/**
 * Sets the raw value of an @c Thread's @c sharing property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetThread_Sharing_RawValue(Thread *message, int32_t value);

/**
 * Fetches the raw value of a @c Thread's @c state property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Thread_State_RawValue(Thread *message);
/**
 * Sets the raw value of an @c Thread's @c state property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetThread_State_RawValue(Thread *message, int32_t value);

#pragma mark - ThreadList

typedef GPB_ENUM(ThreadList_FieldNumber) {
  ThreadList_FieldNumber_ItemsArray = 1,
};

@interface ThreadList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Thread*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - ThreadPeer

typedef GPB_ENUM(ThreadPeer_FieldNumber) {
  ThreadPeer_FieldNumber_Id_p = 1,
  ThreadPeer_FieldNumber_Thread = 2,
  ThreadPeer_FieldNumber_Welcomed = 3,
};

@interface ThreadPeer : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *thread;

@property(nonatomic, readwrite) BOOL welcomed;

@end

#pragma mark - Block

typedef GPB_ENUM(Block_FieldNumber) {
  Block_FieldNumber_Id_p = 1,
  Block_FieldNumber_Thread = 2,
  Block_FieldNumber_Author = 3,
  Block_FieldNumber_Type = 4,
  Block_FieldNumber_Date = 5,
  Block_FieldNumber_ParentsArray = 6,
  Block_FieldNumber_Target = 7,
  Block_FieldNumber_Body = 8,
  Block_FieldNumber_User = 101,
};

@interface Block : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *thread;

@property(nonatomic, readwrite, copy, null_resettable) NSString *author;

@property(nonatomic, readwrite) Block_BlockType type;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *parentsArray;
/** The number of items in @c parentsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger parentsArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *target;

@property(nonatomic, readwrite, copy, null_resettable) NSString *body;

/** view info */
@property(nonatomic, readwrite, strong, null_resettable) User *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

/**
 * Fetches the raw value of a @c Block's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Block_Type_RawValue(Block *message);
/**
 * Sets the raw value of an @c Block's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetBlock_Type_RawValue(Block *message, int32_t value);

#pragma mark - BlockList

typedef GPB_ENUM(BlockList_FieldNumber) {
  BlockList_FieldNumber_ItemsArray = 1,
};

@interface BlockList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Block*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - BlockMessage

typedef GPB_ENUM(BlockMessage_FieldNumber) {
  BlockMessage_FieldNumber_Id_p = 1,
  BlockMessage_FieldNumber_Peer = 2,
  BlockMessage_FieldNumber_Env = 3,
  BlockMessage_FieldNumber_Date = 4,
};

@interface BlockMessage : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *peer;

@property(nonatomic, readwrite, strong, null_resettable) Envelope *env;
/** Test to see if @c env has been set. */
@property(nonatomic, readwrite) BOOL hasEnv;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@end

#pragma mark - Invite

typedef GPB_ENUM(Invite_FieldNumber) {
  Invite_FieldNumber_Id_p = 1,
  Invite_FieldNumber_Block = 2,
  Invite_FieldNumber_Name = 3,
  Invite_FieldNumber_Inviter = 4,
  Invite_FieldNumber_Date = 5,
};

@interface Invite : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSData *block;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) Peer *inviter;
/** Test to see if @c inviter has been set. */
@property(nonatomic, readwrite) BOOL hasInviter;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@end

#pragma mark - InviteList

typedef GPB_ENUM(InviteList_FieldNumber) {
  InviteList_FieldNumber_ItemsArray = 1,
};

@interface InviteList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Invite*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - FileIndex

typedef GPB_ENUM(FileIndex_FieldNumber) {
  FileIndex_FieldNumber_Mill = 1,
  FileIndex_FieldNumber_Checksum = 2,
  FileIndex_FieldNumber_Source = 3,
  FileIndex_FieldNumber_Opts = 4,
  FileIndex_FieldNumber_Hash_p = 5,
  FileIndex_FieldNumber_Key = 6,
  FileIndex_FieldNumber_Media = 7,
  FileIndex_FieldNumber_Name = 8,
  FileIndex_FieldNumber_Size = 9,
  FileIndex_FieldNumber_Added = 10,
  FileIndex_FieldNumber_Meta = 11,
  FileIndex_FieldNumber_TargetsArray = 12,
};

@interface FileIndex : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *mill;

@property(nonatomic, readwrite, copy, null_resettable) NSString *checksum;

@property(nonatomic, readwrite, copy, null_resettable) NSString *source;

@property(nonatomic, readwrite, copy, null_resettable) NSString *opts;

@property(nonatomic, readwrite, copy, null_resettable) NSString *hash_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@property(nonatomic, readwrite, copy, null_resettable) NSString *media;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) int64_t size;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *added;
/** Test to see if @c added has been set. */
@property(nonatomic, readwrite) BOOL hasAdded;

@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *meta;
/** Test to see if @c meta has been set. */
@property(nonatomic, readwrite) BOOL hasMeta;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *targetsArray;
/** The number of items in @c targetsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger targetsArray_Count;

@end

#pragma mark - Node

typedef GPB_ENUM(Node_FieldNumber) {
  Node_FieldNumber_Name = 1,
  Node_FieldNumber_Pin = 2,
  Node_FieldNumber_Plaintext = 3,
  Node_FieldNumber_Mill = 4,
  Node_FieldNumber_Opts = 5,
  Node_FieldNumber_JsonSchema = 6,
  Node_FieldNumber_Links = 8,
};

@interface Node : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) BOOL pin;

@property(nonatomic, readwrite) BOOL plaintext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *mill;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *opts;
/** The number of items in @c opts without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger opts_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *jsonSchema;
/** Test to see if @c jsonSchema has been set. */
@property(nonatomic, readwrite) BOOL hasJsonSchema;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, Link*> *links;
/** The number of items in @c links without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger links_Count;

@end

#pragma mark - Link

typedef GPB_ENUM(Link_FieldNumber) {
  Link_FieldNumber_Use = 1,
  Link_FieldNumber_Pin = 2,
  Link_FieldNumber_Plaintext = 3,
  Link_FieldNumber_Mill = 4,
  Link_FieldNumber_Opts = 5,
  Link_FieldNumber_JsonSchema = 6,
};

@interface Link : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *use;

@property(nonatomic, readwrite) BOOL pin;

@property(nonatomic, readwrite) BOOL plaintext;

@property(nonatomic, readwrite, copy, null_resettable) NSString *mill;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *opts;
/** The number of items in @c opts without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger opts_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *jsonSchema;
/** Test to see if @c jsonSchema has been set. */
@property(nonatomic, readwrite) BOOL hasJsonSchema;

@end

#pragma mark - Notification

typedef GPB_ENUM(Notification_FieldNumber) {
  Notification_FieldNumber_Id_p = 1,
  Notification_FieldNumber_Date = 2,
  Notification_FieldNumber_Actor = 3,
  Notification_FieldNumber_Subject = 4,
  Notification_FieldNumber_SubjectDesc = 5,
  Notification_FieldNumber_Block = 6,
  Notification_FieldNumber_Target = 7,
  Notification_FieldNumber_Type = 8,
  Notification_FieldNumber_Body = 9,
  Notification_FieldNumber_Read = 10,
  Notification_FieldNumber_User = 101,
};

@interface Notification : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *actor;

@property(nonatomic, readwrite, copy, null_resettable) NSString *subject;

@property(nonatomic, readwrite, copy, null_resettable) NSString *subjectDesc;

@property(nonatomic, readwrite, copy, null_resettable) NSString *block;

@property(nonatomic, readwrite, copy, null_resettable) NSString *target;

@property(nonatomic, readwrite) Notification_Type type;

@property(nonatomic, readwrite, copy, null_resettable) NSString *body;

@property(nonatomic, readwrite) BOOL read;

/** view info */
@property(nonatomic, readwrite, strong, null_resettable) User *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

/**
 * Fetches the raw value of a @c Notification's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Notification_Type_RawValue(Notification *message);
/**
 * Sets the raw value of an @c Notification's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetNotification_Type_RawValue(Notification *message, int32_t value);

#pragma mark - NotificationList

typedef GPB_ENUM(NotificationList_FieldNumber) {
  NotificationList_FieldNumber_ItemsArray = 1,
};

@interface NotificationList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Notification*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - Cafe

typedef GPB_ENUM(Cafe_FieldNumber) {
  Cafe_FieldNumber_Peer = 1,
  Cafe_FieldNumber_Address = 2,
  Cafe_FieldNumber_Api = 3,
  Cafe_FieldNumber_Protocol = 4,
  Cafe_FieldNumber_Node = 5,
  Cafe_FieldNumber_URL = 6,
  Cafe_FieldNumber_SwarmArray = 7,
};

@interface Cafe : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *peer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, copy, null_resettable) NSString *api;

@property(nonatomic, readwrite, copy, null_resettable) NSString *protocol;

@property(nonatomic, readwrite, copy, null_resettable) NSString *node;

@property(nonatomic, readwrite, copy, null_resettable) NSString *URL;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *swarmArray;
/** The number of items in @c swarmArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger swarmArray_Count;

@end

#pragma mark - CafeSession

typedef GPB_ENUM(CafeSession_FieldNumber) {
  CafeSession_FieldNumber_Id_p = 1,
  CafeSession_FieldNumber_Access = 2,
  CafeSession_FieldNumber_Exp = 3,
  CafeSession_FieldNumber_Refresh = 4,
  CafeSession_FieldNumber_Rexp = 5,
  CafeSession_FieldNumber_Subject = 6,
  CafeSession_FieldNumber_Type = 7,
  CafeSession_FieldNumber_Cafe = 8,
};

@interface CafeSession : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *access;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *exp;
/** Test to see if @c exp has been set. */
@property(nonatomic, readwrite) BOOL hasExp;

@property(nonatomic, readwrite, copy, null_resettable) NSString *refresh;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *rexp;
/** Test to see if @c rexp has been set. */
@property(nonatomic, readwrite) BOOL hasRexp;

@property(nonatomic, readwrite, copy, null_resettable) NSString *subject;

@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

@property(nonatomic, readwrite, strong, null_resettable) Cafe *cafe;
/** Test to see if @c cafe has been set. */
@property(nonatomic, readwrite) BOOL hasCafe;

@end

#pragma mark - CafeSessionList

typedef GPB_ENUM(CafeSessionList_FieldNumber) {
  CafeSessionList_FieldNumber_ItemsArray = 1,
};

@interface CafeSessionList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CafeSession*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - CafeRequest

typedef GPB_ENUM(CafeRequest_FieldNumber) {
  CafeRequest_FieldNumber_Id_p = 1,
  CafeRequest_FieldNumber_Peer = 2,
  CafeRequest_FieldNumber_Target = 3,
  CafeRequest_FieldNumber_Cafe = 4,
  CafeRequest_FieldNumber_Type = 5,
  CafeRequest_FieldNumber_Date = 6,
};

@interface CafeRequest : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *peer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *target;

@property(nonatomic, readwrite, strong, null_resettable) Cafe *cafe;
/** Test to see if @c cafe has been set. */
@property(nonatomic, readwrite) BOOL hasCafe;

@property(nonatomic, readwrite) CafeRequest_Type type;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@end

/**
 * Fetches the raw value of a @c CafeRequest's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CafeRequest_Type_RawValue(CafeRequest *message);
/**
 * Sets the raw value of an @c CafeRequest's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCafeRequest_Type_RawValue(CafeRequest *message, int32_t value);

#pragma mark - CafeMessage

typedef GPB_ENUM(CafeMessage_FieldNumber) {
  CafeMessage_FieldNumber_Id_p = 1,
  CafeMessage_FieldNumber_Peer = 2,
  CafeMessage_FieldNumber_Date = 3,
  CafeMessage_FieldNumber_Attempts = 4,
};

@interface CafeMessage : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *peer;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@property(nonatomic, readwrite) int32_t attempts;

@end

#pragma mark - CafeClientNonce

typedef GPB_ENUM(CafeClientNonce_FieldNumber) {
  CafeClientNonce_FieldNumber_Value = 1,
  CafeClientNonce_FieldNumber_Address = 2,
  CafeClientNonce_FieldNumber_Date = 3,
};

@interface CafeClientNonce : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *value;

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@end

#pragma mark - CafeClient

typedef GPB_ENUM(CafeClient_FieldNumber) {
  CafeClient_FieldNumber_Id_p = 1,
  CafeClient_FieldNumber_Address = 2,
  CafeClient_FieldNumber_Created = 3,
  CafeClient_FieldNumber_Seen = 4,
  CafeClient_FieldNumber_Token = 5,
};

@interface CafeClient : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *created;
/** Test to see if @c created has been set. */
@property(nonatomic, readwrite) BOOL hasCreated;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *seen;
/** Test to see if @c seen has been set. */
@property(nonatomic, readwrite) BOOL hasSeen;

@property(nonatomic, readwrite, copy, null_resettable) NSString *token;

@end

#pragma mark - CafeClientList

typedef GPB_ENUM(CafeClientList_FieldNumber) {
  CafeClientList_FieldNumber_ItemsArray = 1,
};

@interface CafeClientList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<CafeClient*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - CafeToken

typedef GPB_ENUM(CafeToken_FieldNumber) {
  CafeToken_FieldNumber_Id_p = 1,
  CafeToken_FieldNumber_Value = 2,
  CafeToken_FieldNumber_Date = 3,
};

@interface CafeToken : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSData *value;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@end

#pragma mark - CafeClientThread

typedef GPB_ENUM(CafeClientThread_FieldNumber) {
  CafeClientThread_FieldNumber_Id_p = 1,
  CafeClientThread_FieldNumber_Client = 2,
  CafeClientThread_FieldNumber_Ciphertext = 3,
};

@interface CafeClientThread : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *client;

/** encrypted Thread */
@property(nonatomic, readwrite, copy, null_resettable) NSData *ciphertext;

@end

#pragma mark - CafeClientMessage

typedef GPB_ENUM(CafeClientMessage_FieldNumber) {
  CafeClientMessage_FieldNumber_Id_p = 1,
  CafeClientMessage_FieldNumber_Peer = 2,
  CafeClientMessage_FieldNumber_Client = 3,
  CafeClientMessage_FieldNumber_Date = 4,
};

@interface CafeClientMessage : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite, copy, null_resettable) NSString *peer;

@property(nonatomic, readwrite, copy, null_resettable) NSString *client;

@property(nonatomic, readwrite, strong, null_resettable) GPBTimestamp *date;
/** Test to see if @c date has been set. */
@property(nonatomic, readwrite) BOOL hasDate;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
