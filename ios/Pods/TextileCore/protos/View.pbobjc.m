// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: view.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "View.pbobjc.h"
#import "Model.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ViewRoot

@implementation ViewRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ViewRoot_FileDescriptor

static GPBFileDescriptor *ViewRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AddThreadConfig

@implementation AddThreadConfig

@dynamic key;
@dynamic name;
@dynamic hasSchema, schema;
@dynamic type;
@dynamic sharing;
@dynamic membersArray, membersArray_Count;
@dynamic force;

typedef struct AddThreadConfig__storage_ {
  uint32_t _has_storage_[1];
  Thread_Type type;
  Thread_Sharing sharing;
  NSString *key;
  NSString *name;
  AddThreadConfig_Schema *schema;
  NSMutableArray *membersArray;
} AddThreadConfig__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = AddThreadConfig_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddThreadConfig__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AddThreadConfig_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddThreadConfig__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "schema",
        .dataTypeSpecific.className = GPBStringifySymbol(AddThreadConfig_Schema),
        .number = AddThreadConfig_FieldNumber_Schema,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddThreadConfig__storage_, schema),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Thread_Type_EnumDescriptor,
        .number = AddThreadConfig_FieldNumber_Type,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AddThreadConfig__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sharing",
        .dataTypeSpecific.enumDescFunc = Thread_Sharing_EnumDescriptor,
        .number = AddThreadConfig_FieldNumber_Sharing,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AddThreadConfig__storage_, sharing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "membersArray",
        .dataTypeSpecific.className = NULL,
        .number = AddThreadConfig_FieldNumber_MembersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AddThreadConfig__storage_, membersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "force",
        .dataTypeSpecific.className = NULL,
        .number = AddThreadConfig_FieldNumber_Force,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddThreadConfig class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddThreadConfig__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AddThreadConfig_Type_RawValue(AddThreadConfig *message) {
  GPBDescriptor *descriptor = [AddThreadConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddThreadConfig_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddThreadConfig_Type_RawValue(AddThreadConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [AddThreadConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddThreadConfig_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t AddThreadConfig_Sharing_RawValue(AddThreadConfig *message) {
  GPBDescriptor *descriptor = [AddThreadConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddThreadConfig_FieldNumber_Sharing];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddThreadConfig_Sharing_RawValue(AddThreadConfig *message, int32_t value) {
  GPBDescriptor *descriptor = [AddThreadConfig descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddThreadConfig_FieldNumber_Sharing];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AddThreadConfig_Schema

@implementation AddThreadConfig_Schema

@dynamic id_p;
@dynamic json;
@dynamic preset;

typedef struct AddThreadConfig_Schema__storage_ {
  uint32_t _has_storage_[1];
  AddThreadConfig_Schema_Preset preset;
  NSString *id_p;
  NSString *json;
} AddThreadConfig_Schema__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = AddThreadConfig_Schema_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddThreadConfig_Schema__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "json",
        .dataTypeSpecific.className = NULL,
        .number = AddThreadConfig_Schema_FieldNumber_Json,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddThreadConfig_Schema__storage_, json),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preset",
        .dataTypeSpecific.enumDescFunc = AddThreadConfig_Schema_Preset_EnumDescriptor,
        .number = AddThreadConfig_Schema_FieldNumber_Preset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AddThreadConfig_Schema__storage_, preset),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddThreadConfig_Schema class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddThreadConfig_Schema__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AddThreadConfig)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AddThreadConfig_Schema_Preset_RawValue(AddThreadConfig_Schema *message) {
  GPBDescriptor *descriptor = [AddThreadConfig_Schema descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddThreadConfig_Schema_FieldNumber_Preset];
  return GPBGetMessageInt32Field(message, field);
}

void SetAddThreadConfig_Schema_Preset_RawValue(AddThreadConfig_Schema *message, int32_t value) {
  GPBDescriptor *descriptor = [AddThreadConfig_Schema descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AddThreadConfig_Schema_FieldNumber_Preset];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum AddThreadConfig_Schema_Preset

GPBEnumDescriptor *AddThreadConfig_Schema_Preset_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "None\000Blob\000CameraRoll\000Media\000";
    static const int32_t values[] = {
        AddThreadConfig_Schema_Preset_None,
        AddThreadConfig_Schema_Preset_Blob,
        AddThreadConfig_Schema_Preset_CameraRoll,
        AddThreadConfig_Schema_Preset_Media,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AddThreadConfig_Schema_Preset)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:AddThreadConfig_Schema_Preset_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL AddThreadConfig_Schema_Preset_IsValidValue(int32_t value__) {
  switch (value__) {
    case AddThreadConfig_Schema_Preset_None:
    case AddThreadConfig_Schema_Preset_Blob:
    case AddThreadConfig_Schema_Preset_CameraRoll:
    case AddThreadConfig_Schema_Preset_Media:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Step

@implementation Step

@dynamic name;
@dynamic hasLink, link;

typedef struct Step__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  Link *link;
} Step__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = Step_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Step__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = GPBStringifySymbol(Link),
        .number = Step_FieldNumber_Link,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Step__storage_, link),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Step class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Step__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001D\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Directory

@implementation Directory

@dynamic files, files_Count;

typedef struct Directory__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *files;
} Directory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "files",
        .dataTypeSpecific.className = GPBStringifySymbol(FileIndex),
        .number = Directory_FieldNumber_Files,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Directory__storage_, files),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Directory class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Directory__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DirectoryList

@implementation DirectoryList

@dynamic itemsArray, itemsArray_Count;

typedef struct DirectoryList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} DirectoryList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Directory),
        .number = DirectoryList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DirectoryList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DirectoryList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DirectoryList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Keys

@implementation Keys

@dynamic files, files_Count;

typedef struct Keys__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *files;
} Keys__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "files",
        .dataTypeSpecific.className = NULL,
        .number = Keys_FieldNumber_Files,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Keys__storage_, files),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Keys class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Keys__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NewInvite

@implementation NewInvite

@dynamic id_p;
@dynamic key;
@dynamic inviter;

typedef struct NewInvite__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *key;
  NSString *inviter;
} NewInvite__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = NewInvite_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NewInvite__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = NewInvite_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NewInvite__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.className = NULL,
        .number = NewInvite_FieldNumber_Inviter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NewInvite__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NewInvite class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NewInvite__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteView

@implementation InviteView

@dynamic id_p;
@dynamic name;
@dynamic hasInviter, inviter;
@dynamic hasDate, date;

typedef struct InviteView__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  NSString *name;
  User *inviter;
  GPBTimestamp *date;
} InviteView__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = InviteView_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InviteView__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = InviteView_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InviteView__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inviter",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = InviteView_FieldNumber_Inviter,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InviteView__storage_, inviter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = InviteView_FieldNumber_Date,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InviteView__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteView class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteView__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InviteViewList

@implementation InviteViewList

@dynamic itemsArray, itemsArray_Count;

typedef struct InviteViewList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} InviteViewList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InviteView),
        .number = InviteViewList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InviteViewList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InviteViewList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InviteViewList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedRequest

@implementation FeedRequest

@dynamic thread;
@dynamic offset;
@dynamic limit;
@dynamic mode;

typedef struct FeedRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t limit;
  FeedRequest_Mode mode;
  NSString *thread;
  NSString *offset;
} FeedRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "thread",
        .dataTypeSpecific.className = NULL,
        .number = FeedRequest_FieldNumber_Thread,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FeedRequest__storage_, thread),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = FeedRequest_FieldNumber_Offset,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FeedRequest__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = FeedRequest_FieldNumber_Limit,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FeedRequest__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = FeedRequest_Mode_EnumDescriptor,
        .number = FeedRequest_FieldNumber_Mode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FeedRequest__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedRequest class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FeedRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FeedRequest_Mode_RawValue(FeedRequest *message) {
  GPBDescriptor *descriptor = [FeedRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FeedRequest_FieldNumber_Mode];
  return GPBGetMessageInt32Field(message, field);
}

void SetFeedRequest_Mode_RawValue(FeedRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [FeedRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FeedRequest_FieldNumber_Mode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum FeedRequest_Mode

GPBEnumDescriptor *FeedRequest_Mode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Chrono\000Annotated\000Stacks\000";
    static const int32_t values[] = {
        FeedRequest_Mode_Chrono,
        FeedRequest_Mode_Annotated,
        FeedRequest_Mode_Stacks,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(FeedRequest_Mode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:FeedRequest_Mode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL FeedRequest_Mode_IsValidValue(int32_t value__) {
  switch (value__) {
    case FeedRequest_Mode_Chrono:
    case FeedRequest_Mode_Annotated:
    case FeedRequest_Mode_Stacks:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - FeedItem

@implementation FeedItem

@dynamic block;
@dynamic thread;
@dynamic hasPayload, payload;

typedef struct FeedItem__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  NSString *thread;
  GPBAny *payload;
} FeedItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = FeedItem_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FeedItem__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "thread",
        .dataTypeSpecific.className = NULL,
        .number = FeedItem_FieldNumber_Thread,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FeedItem__storage_, thread),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = FeedItem_FieldNumber_Payload,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FeedItem__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedItem class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FeedItem__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FeedItemList

@implementation FeedItemList

@dynamic itemsArray, itemsArray_Count;
@dynamic count;
@dynamic next;

typedef struct FeedItemList__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSMutableArray *itemsArray;
  NSString *next;
} FeedItemList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedItem),
        .number = FeedItemList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FeedItemList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = FeedItemList_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FeedItemList__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "next",
        .dataTypeSpecific.className = NULL,
        .number = FeedItemList_FieldNumber_Next,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FeedItemList__storage_, next),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeedItemList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FeedItemList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Merge

@implementation Merge

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic targetsArray, targetsArray_Count;

typedef struct Merge__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
  NSMutableArray *targetsArray;
} Merge__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Merge_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Merge__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Merge_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Merge__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Merge_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Merge__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "targetsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedItem),
        .number = Merge_FieldNumber_TargetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Merge__storage_, targetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Merge class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Merge__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Ignore

@implementation Ignore

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic hasTarget, target;

typedef struct Ignore__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
  FeedItem *target;
} Ignore__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Ignore_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Ignore__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Ignore_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Ignore__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Ignore_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Ignore__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedItem),
        .number = Ignore_FieldNumber_Target,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Ignore__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Ignore class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Ignore__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Flag

@implementation Flag

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic hasTarget, target;

typedef struct Flag__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
  FeedItem *target;
} Flag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Flag_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Flag__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Flag_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Flag__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Flag_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Flag__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedItem),
        .number = Flag_FieldNumber_Target,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Flag__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Flag class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Flag__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Join

@implementation Join

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic likesArray, likesArray_Count;

typedef struct Join__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
  NSMutableArray *likesArray;
} Join__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Join_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Join__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Join_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Join__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Join_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Join__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Like),
        .number = Join_FieldNumber_LikesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Join__storage_, likesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Join class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Join__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Announce

@implementation Announce

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;

typedef struct Announce__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
} Announce__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Announce_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Announce__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Announce_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Announce__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Announce_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Announce__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Announce class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Announce__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Leave

@implementation Leave

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic likesArray, likesArray_Count;

typedef struct Leave__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
  NSMutableArray *likesArray;
} Leave__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Leave_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Leave__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Leave_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Leave__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Leave_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Leave__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Like),
        .number = Leave_FieldNumber_LikesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Leave__storage_, likesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Leave class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Leave__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Text

@implementation Text

@dynamic block;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic body;
@dynamic commentsArray, commentsArray_Count;
@dynamic likesArray, likesArray_Count;

typedef struct Text__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  GPBTimestamp *date;
  User *user;
  NSString *body;
  NSMutableArray *commentsArray;
  NSMutableArray *likesArray;
} Text__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Text_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Text__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Text_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Text__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Text_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Text__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = Text_FieldNumber_Body,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Text__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = Text_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Text__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Like),
        .number = Text_FieldNumber_LikesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Text__storage_, likesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Text class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Text__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TextList

@implementation TextList

@dynamic itemsArray, itemsArray_Count;

typedef struct TextList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} TextList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Text),
        .number = TextList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TextList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TextList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TextList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - File

@implementation File

@dynamic index;
@dynamic hasFile, file;
@dynamic links, links_Count;

typedef struct File__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  FileIndex *file;
  NSMutableDictionary *links;
} File__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = File_FieldNumber_Index,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(File__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "file",
        .dataTypeSpecific.className = GPBStringifySymbol(FileIndex),
        .number = File_FieldNumber_File,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(File__storage_, file),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "links",
        .dataTypeSpecific.className = GPBStringifySymbol(FileIndex),
        .number = File_FieldNumber_Links,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(File__storage_, links),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[File class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(File__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Files

@implementation Files

@dynamic block;
@dynamic target;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic caption;
@dynamic filesArray, filesArray_Count;
@dynamic commentsArray, commentsArray_Count;
@dynamic likesArray, likesArray_Count;
@dynamic threadsArray, threadsArray_Count;

typedef struct Files__storage_ {
  uint32_t _has_storage_[1];
  NSString *block;
  NSString *target;
  GPBTimestamp *date;
  User *user;
  NSString *caption;
  NSMutableArray *filesArray;
  NSMutableArray *commentsArray;
  NSMutableArray *likesArray;
  NSMutableArray *threadsArray;
} Files__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "block",
        .dataTypeSpecific.className = NULL,
        .number = Files_FieldNumber_Block,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Files__storage_, block),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = NULL,
        .number = Files_FieldNumber_Target,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Files__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Files_FieldNumber_Date,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Files__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Files_FieldNumber_User,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Files__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "caption",
        .dataTypeSpecific.className = NULL,
        .number = Files_FieldNumber_Caption,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Files__storage_, caption),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "filesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(File),
        .number = Files_FieldNumber_FilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Files__storage_, filesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = Files_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Files__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "likesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Like),
        .number = Files_FieldNumber_LikesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Files__storage_, likesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "threadsArray",
        .dataTypeSpecific.className = NULL,
        .number = Files_FieldNumber_ThreadsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Files__storage_, threadsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Files class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Files__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FilesList

@implementation FilesList

@dynamic itemsArray, itemsArray_Count;

typedef struct FilesList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} FilesList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Files),
        .number = FilesList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FilesList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FilesList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FilesList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Comment

@implementation Comment

@dynamic id_p;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic body;
@dynamic hasTarget, target;

typedef struct Comment__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  GPBTimestamp *date;
  User *user;
  NSString *body;
  FeedItem *target;
} Comment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Comment__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Comment_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Comment__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Comment_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Comment__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "body",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_Body,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Comment__storage_, body),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedItem),
        .number = Comment_FieldNumber_Target,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Comment__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Comment class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Comment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommentList

@implementation CommentList

@dynamic itemsArray, itemsArray_Count;

typedef struct CommentList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} CommentList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = CommentList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CommentList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommentList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommentList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Like

@implementation Like

@dynamic id_p;
@dynamic hasDate, date;
@dynamic hasUser, user;
@dynamic hasTarget, target;

typedef struct Like__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  GPBTimestamp *date;
  User *user;
  FeedItem *target;
} Like__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Like_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Like__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = Like_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Like__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "user",
        .dataTypeSpecific.className = GPBStringifySymbol(User),
        .number = Like_FieldNumber_User,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Like__storage_, user),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "target",
        .dataTypeSpecific.className = GPBStringifySymbol(FeedItem),
        .number = Like_FieldNumber_Target,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Like__storage_, target),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Like class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Like__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LikeList

@implementation LikeList

@dynamic itemsArray, itemsArray_Count;

typedef struct LikeList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} LikeList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Like),
        .number = LikeList_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LikeList__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LikeList class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LikeList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WalletUpdate

@implementation WalletUpdate

@dynamic id_p;
@dynamic key;
@dynamic type;

typedef struct WalletUpdate__storage_ {
  uint32_t _has_storage_[1];
  WalletUpdate_Type type;
  NSString *id_p;
  NSString *key;
} WalletUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = WalletUpdate_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WalletUpdate__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.className = NULL,
        .number = WalletUpdate_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WalletUpdate__storage_, key),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = WalletUpdate_Type_EnumDescriptor,
        .number = WalletUpdate_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(WalletUpdate__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WalletUpdate class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WalletUpdate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t WalletUpdate_Type_RawValue(WalletUpdate *message) {
  GPBDescriptor *descriptor = [WalletUpdate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WalletUpdate_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetWalletUpdate_Type_RawValue(WalletUpdate *message, int32_t value) {
  GPBDescriptor *descriptor = [WalletUpdate descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:WalletUpdate_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum WalletUpdate_Type

GPBEnumDescriptor *WalletUpdate_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ThreadAdded\000ThreadRemoved\000AccountPeerAdd"
        "ed\000AccountPeerRemoved\000";
    static const int32_t values[] = {
        WalletUpdate_Type_ThreadAdded,
        WalletUpdate_Type_ThreadRemoved,
        WalletUpdate_Type_AccountPeerAdded,
        WalletUpdate_Type_AccountPeerRemoved,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(WalletUpdate_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:WalletUpdate_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL WalletUpdate_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case WalletUpdate_Type_ThreadAdded:
    case WalletUpdate_Type_ThreadRemoved:
    case WalletUpdate_Type_AccountPeerAdded:
    case WalletUpdate_Type_AccountPeerRemoved:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Summary

@implementation Summary

@dynamic accountPeerCount;
@dynamic threadCount;
@dynamic fileCount;
@dynamic contactCount;

typedef struct Summary__storage_ {
  uint32_t _has_storage_[1];
  int32_t accountPeerCount;
  int32_t threadCount;
  int32_t fileCount;
  int32_t contactCount;
} Summary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountPeerCount",
        .dataTypeSpecific.className = NULL,
        .number = Summary_FieldNumber_AccountPeerCount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Summary__storage_, accountPeerCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "threadCount",
        .dataTypeSpecific.className = NULL,
        .number = Summary_FieldNumber_ThreadCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Summary__storage_, threadCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "fileCount",
        .dataTypeSpecific.className = NULL,
        .number = Summary_FieldNumber_FileCount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Summary__storage_, fileCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "contactCount",
        .dataTypeSpecific.className = NULL,
        .number = Summary_FieldNumber_ContactCount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Summary__storage_, contactCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Summary class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Summary__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogLevel

@implementation LogLevel

@dynamic systems, systems_Count;

typedef struct LogLevel__storage_ {
  uint32_t _has_storage_[1];
  GPBStringEnumDictionary *systems;
} LogLevel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "systems",
        .dataTypeSpecific.enumDescFunc = LogLevel_Level_EnumDescriptor,
        .number = LogLevel_FieldNumber_Systems,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(LogLevel__storage_, systems),
        .flags = (GPBFieldFlags)(GPBFieldMapKeyString | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogLevel class]
                                     rootClass:[ViewRoot class]
                                          file:ViewRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LogLevel__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum LogLevel_Level

GPBEnumDescriptor *LogLevel_Level_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Critical\000Error\000Warning\000Notice\000Info\000Debug"
        "\000";
    static const int32_t values[] = {
        LogLevel_Level_Critical,
        LogLevel_Level_Error,
        LogLevel_Level_Warning,
        LogLevel_Level_Notice,
        LogLevel_Level_Info,
        LogLevel_Level_Debug,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LogLevel_Level)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LogLevel_Level_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LogLevel_Level_IsValidValue(int32_t value__) {
  switch (value__) {
    case LogLevel_Level_Critical:
    case LogLevel_Level_Error:
    case LogLevel_Level_Warning:
    case LogLevel_Level_Notice:
    case LogLevel_Level_Info:
    case LogLevel_Level_Debug:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
