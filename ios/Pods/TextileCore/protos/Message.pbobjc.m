// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MessageRoot

@implementation MessageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessageRoot_FileDescriptor

static GPBFileDescriptor *MessageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Message

@implementation Message

@dynamic type;
@dynamic hasPayload, payload;
@dynamic request;
@dynamic response;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  Message_Type type;
  int32_t request;
  GPBAny *payload;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Message_Type_EnumDescriptor,
        .number = Message_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = Message_FieldNumber_Payload,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "request",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Request,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, request),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "response",
        .dataTypeSpecific.className = NULL,
        .number = Message_FieldNumber_Response,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Message_Type_RawValue(Message *message) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetMessage_Type_RawValue(Message *message, int32_t value) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Message_Type

GPBEnumDescriptor *Message_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Ping\000Pong\000ThreadEnvelope\000ThreadEnvelopeA"
        "ck\000CafeChallenge\000CafeNonce\000CafeRegistrat"
        "ion\000CafeDeregistration\000CafeDeregistratio"
        "nAck\000CafeSession\000CafeRefreshSession\000Cafe"
        "Store\000CafeStoreAck\000CafeUnstore\000CafeUnsto"
        "reAck\000CafeObject\000CafeObjectList\000CafeStor"
        "eThread\000CafeStoreThreadAck\000CafeUnstoreTh"
        "read\000CafeUnstoreThreadAck\000CafeDeliverMes"
        "sage\000CafeCheckMessages\000CafeMessages\000Cafe"
        "DeleteMessages\000CafeDeleteMessagesAck\000Caf"
        "eYouHaveMail\000CafePublishPeer\000CafePublish"
        "PeerAck\000CafeQuery\000CafeQueryRes\000CafePubsu"
        "bQuery\000CafePubsubQueryRes\000Error\000CafeCont"
        "actQuery\000CafeContactQueryRes\000CafePubsubC"
        "ontactQuery\000CafePubsubContactQueryRes\000";
    static const int32_t values[] = {
        Message_Type_Ping,
        Message_Type_Pong,
        Message_Type_ThreadEnvelope,
        Message_Type_ThreadEnvelopeAck,
        Message_Type_CafeChallenge,
        Message_Type_CafeNonce,
        Message_Type_CafeRegistration,
        Message_Type_CafeDeregistration,
        Message_Type_CafeDeregistrationAck,
        Message_Type_CafeSession,
        Message_Type_CafeRefreshSession,
        Message_Type_CafeStore,
        Message_Type_CafeStoreAck,
        Message_Type_CafeUnstore,
        Message_Type_CafeUnstoreAck,
        Message_Type_CafeObject,
        Message_Type_CafeObjectList,
        Message_Type_CafeStoreThread,
        Message_Type_CafeStoreThreadAck,
        Message_Type_CafeUnstoreThread,
        Message_Type_CafeUnstoreThreadAck,
        Message_Type_CafeDeliverMessage,
        Message_Type_CafeCheckMessages,
        Message_Type_CafeMessages,
        Message_Type_CafeDeleteMessages,
        Message_Type_CafeDeleteMessagesAck,
        Message_Type_CafeYouHaveMail,
        Message_Type_CafePublishPeer,
        Message_Type_CafePublishPeerAck,
        Message_Type_CafeQuery,
        Message_Type_CafeQueryRes,
        Message_Type_CafePubsubQuery,
        Message_Type_CafePubsubQueryRes,
        Message_Type_Error,
        Message_Type_CafeContactQuery,
        Message_Type_CafeContactQueryRes,
        Message_Type_CafePubsubContactQuery,
        Message_Type_CafePubsubContactQueryRes,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Message_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Message_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Message_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Message_Type_Ping:
    case Message_Type_Pong:
    case Message_Type_ThreadEnvelope:
    case Message_Type_ThreadEnvelopeAck:
    case Message_Type_CafeChallenge:
    case Message_Type_CafeNonce:
    case Message_Type_CafeRegistration:
    case Message_Type_CafeDeregistration:
    case Message_Type_CafeDeregistrationAck:
    case Message_Type_CafeSession:
    case Message_Type_CafeRefreshSession:
    case Message_Type_CafeStore:
    case Message_Type_CafeStoreAck:
    case Message_Type_CafeUnstore:
    case Message_Type_CafeUnstoreAck:
    case Message_Type_CafeObject:
    case Message_Type_CafeObjectList:
    case Message_Type_CafeStoreThread:
    case Message_Type_CafeStoreThreadAck:
    case Message_Type_CafeUnstoreThread:
    case Message_Type_CafeUnstoreThreadAck:
    case Message_Type_CafeDeliverMessage:
    case Message_Type_CafeCheckMessages:
    case Message_Type_CafeMessages:
    case Message_Type_CafeDeleteMessages:
    case Message_Type_CafeDeleteMessagesAck:
    case Message_Type_CafeYouHaveMail:
    case Message_Type_CafePublishPeer:
    case Message_Type_CafePublishPeerAck:
    case Message_Type_CafeQuery:
    case Message_Type_CafeQueryRes:
    case Message_Type_CafePubsubQuery:
    case Message_Type_CafePubsubQueryRes:
    case Message_Type_Error:
    case Message_Type_CafeContactQuery:
    case Message_Type_CafeContactQueryRes:
    case Message_Type_CafePubsubContactQuery:
    case Message_Type_CafePubsubContactQueryRes:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Envelope

@implementation Envelope

@dynamic hasMessage, message;
@dynamic sig;

typedef struct Envelope__storage_ {
  uint32_t _has_storage_[1];
  Message *message;
  NSData *sig;
} Envelope__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "message",
        .dataTypeSpecific.className = GPBStringifySymbol(Message),
        .number = Envelope_FieldNumber_Message,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Envelope__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sig",
        .dataTypeSpecific.className = NULL,
        .number = Envelope_FieldNumber_Sig,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Envelope__storage_, sig),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Envelope class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Envelope__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Error

@implementation Error

@dynamic code;
@dynamic message;

typedef struct Error__storage_ {
  uint32_t _has_storage_[1];
  uint32_t code;
  NSString *message;
} Error__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .dataTypeSpecific.className = NULL,
        .number = Error_FieldNumber_Code,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Error__storage_, code),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "message",
        .dataTypeSpecific.className = NULL,
        .number = Error_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Error__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Error class]
                                     rootClass:[MessageRoot class]
                                          file:MessageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Error__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
