// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Query.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - QueryRoot

@implementation QueryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - QueryRoot_FileDescriptor

static GPBFileDescriptor *QueryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - QueryOptions

@implementation QueryOptions

@dynamic localOnly;
@dynamic remoteOnly;
@dynamic limit;
@dynamic wait;
@dynamic filter;
@dynamic excludeArray, excludeArray_Count;

typedef struct QueryOptions__storage_ {
  uint32_t _has_storage_[1];
  int32_t limit;
  int32_t wait;
  QueryOptions_FilterType filter;
  NSMutableArray *excludeArray;
} QueryOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "localOnly",
        .dataTypeSpecific.className = NULL,
        .number = QueryOptions_FieldNumber_LocalOnly,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "limit",
        .dataTypeSpecific.className = NULL,
        .number = QueryOptions_FieldNumber_Limit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueryOptions__storage_, limit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "wait",
        .dataTypeSpecific.className = NULL,
        .number = QueryOptions_FieldNumber_Wait,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(QueryOptions__storage_, wait),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "filter",
        .dataTypeSpecific.enumDescFunc = QueryOptions_FilterType_EnumDescriptor,
        .number = QueryOptions_FieldNumber_Filter,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(QueryOptions__storage_, filter),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "excludeArray",
        .dataTypeSpecific.className = NULL,
        .number = QueryOptions_FieldNumber_ExcludeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryOptions__storage_, excludeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "remoteOnly",
        .dataTypeSpecific.className = NULL,
        .number = QueryOptions_FieldNumber_RemoteOnly,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryOptions class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryOptions__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\t\000\006\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QueryOptions_Filter_RawValue(QueryOptions *message) {
  GPBDescriptor *descriptor = [QueryOptions descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryOptions_FieldNumber_Filter];
  return GPBGetMessageInt32Field(message, field);
}

void SetQueryOptions_Filter_RawValue(QueryOptions *message, int32_t value) {
  GPBDescriptor *descriptor = [QueryOptions descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryOptions_FieldNumber_Filter];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum QueryOptions_FilterType

GPBEnumDescriptor *QueryOptions_FilterType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NoFilter\000HideOlder\000";
    static const int32_t values[] = {
        QueryOptions_FilterType_NoFilter,
        QueryOptions_FilterType_HideOlder,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(QueryOptions_FilterType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:QueryOptions_FilterType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL QueryOptions_FilterType_IsValidValue(int32_t value__) {
  switch (value__) {
    case QueryOptions_FilterType_NoFilter:
    case QueryOptions_FilterType_HideOlder:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Query

@implementation Query

@dynamic id_p;
@dynamic token;
@dynamic type;
@dynamic hasOptions, options;
@dynamic hasPayload, payload;

typedef struct Query__storage_ {
  uint32_t _has_storage_[1];
  Query_Type type;
  NSString *id_p;
  NSString *token;
  QueryOptions *options;
  GPBAny *payload;
} Query__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Query_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Query__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "token",
        .dataTypeSpecific.className = NULL,
        .number = Query_FieldNumber_Token,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Query__storage_, token),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Query_Type_EnumDescriptor,
        .number = Query_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Query__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "options",
        .dataTypeSpecific.className = GPBStringifySymbol(QueryOptions),
        .number = Query_FieldNumber_Options,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Query__storage_, options),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = Query_FieldNumber_Payload,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Query__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Query class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Query__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Query_Type_RawValue(Query *message) {
  GPBDescriptor *descriptor = [Query descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Query_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetQuery_Type_RawValue(Query *message, int32_t value) {
  GPBDescriptor *descriptor = [Query descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Query_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum Query_Type

GPBEnumDescriptor *Query_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ThreadSnapshots\000Contacts\000";
    static const int32_t values[] = {
        Query_Type_ThreadSnapshots,
        Query_Type_Contacts,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Query_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Query_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Query_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Query_Type_ThreadSnapshots:
    case Query_Type_Contacts:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PubSubQuery

@implementation PubSubQuery

@dynamic id_p;
@dynamic type;
@dynamic hasPayload, payload;
@dynamic responseType;
@dynamic excludeArray, excludeArray_Count;
@dynamic topic;
@dynamic timeout;

typedef struct PubSubQuery__storage_ {
  uint32_t _has_storage_[1];
  Query_Type type;
  PubSubQuery_ResponseType responseType;
  int32_t timeout;
  NSString *id_p;
  GPBAny *payload;
  NSMutableArray *excludeArray;
  NSString *topic;
} PubSubQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PubSubQuery_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Query_Type_EnumDescriptor,
        .number = PubSubQuery_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "payload",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = PubSubQuery_FieldNumber_Payload,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, payload),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "responseType",
        .dataTypeSpecific.enumDescFunc = PubSubQuery_ResponseType_EnumDescriptor,
        .number = PubSubQuery_FieldNumber_ResponseType,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, responseType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "excludeArray",
        .dataTypeSpecific.className = NULL,
        .number = PubSubQuery_FieldNumber_ExcludeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, excludeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "topic",
        .dataTypeSpecific.className = NULL,
        .number = PubSubQuery_FieldNumber_Topic,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, topic),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.className = NULL,
        .number = PubSubQuery_FieldNumber_Timeout,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PubSubQuery__storage_, timeout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PubSubQuery class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PubSubQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PubSubQuery_Type_RawValue(PubSubQuery *message) {
  GPBDescriptor *descriptor = [PubSubQuery descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PubSubQuery_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPubSubQuery_Type_RawValue(PubSubQuery *message, int32_t value) {
  GPBDescriptor *descriptor = [PubSubQuery descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PubSubQuery_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PubSubQuery_ResponseType_RawValue(PubSubQuery *message) {
  GPBDescriptor *descriptor = [PubSubQuery descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PubSubQuery_FieldNumber_ResponseType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPubSubQuery_ResponseType_RawValue(PubSubQuery *message, int32_t value) {
  GPBDescriptor *descriptor = [PubSubQuery descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PubSubQuery_FieldNumber_ResponseType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PubSubQuery_ResponseType

GPBEnumDescriptor *PubSubQuery_ResponseType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "P2P\000Pubsub\000";
    static const int32_t values[] = {
        PubSubQuery_ResponseType_P2P,
        PubSubQuery_ResponseType_Pubsub,
    };
    static const char *extraTextFormatInfo = "\001\000\003\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PubSubQuery_ResponseType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PubSubQuery_ResponseType_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PubSubQuery_ResponseType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PubSubQuery_ResponseType_P2P:
    case PubSubQuery_ResponseType_Pubsub:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - QueryResult

@implementation QueryResult

@dynamic id_p;
@dynamic hasDate, date;
@dynamic local;
@dynamic hasValue, value;

typedef struct QueryResult__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  GPBTimestamp *date;
  GPBAny *value;
} QueryResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = QueryResult_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryResult__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = QueryResult_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(QueryResult__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "local",
        .dataTypeSpecific.className = NULL,
        .number = QueryResult_FieldNumber_Local,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = QueryResult_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(QueryResult__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryResult class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - QueryResults

@implementation QueryResults

@dynamic type;
@dynamic itemsArray, itemsArray_Count;

typedef struct QueryResults__storage_ {
  uint32_t _has_storage_[1];
  Query_Type type;
  NSMutableArray *itemsArray;
} QueryResults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Query_Type_EnumDescriptor,
        .number = QueryResults_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(QueryResults__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(QueryResult),
        .number = QueryResults_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(QueryResults__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[QueryResults class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(QueryResults__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t QueryResults_Type_RawValue(QueryResults *message) {
  GPBDescriptor *descriptor = [QueryResults descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryResults_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetQueryResults_Type_RawValue(QueryResults *message, int32_t value) {
  GPBDescriptor *descriptor = [QueryResults descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:QueryResults_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - PubSubQueryResults

@implementation PubSubQueryResults

@dynamic id_p;
@dynamic hasResults, results;

typedef struct PubSubQueryResults__storage_ {
  uint32_t _has_storage_[1];
  NSString *id_p;
  QueryResults *results;
} PubSubQueryResults__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = PubSubQueryResults_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PubSubQueryResults__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "results",
        .dataTypeSpecific.className = GPBStringifySymbol(QueryResults),
        .number = PubSubQueryResults_FieldNumber_Results,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PubSubQueryResults__storage_, results),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PubSubQueryResults class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PubSubQueryResults__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ContactQuery

@implementation ContactQuery

@dynamic address;
@dynamic username;

typedef struct ContactQuery__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSString *username;
} ContactQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = ContactQuery_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ContactQuery__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = ContactQuery_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ContactQuery__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ContactQuery class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ContactQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ThreadSnapshotQuery

@implementation ThreadSnapshotQuery

@dynamic address;

typedef struct ThreadSnapshotQuery__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
} ThreadSnapshotQuery__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = ThreadSnapshotQuery_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ThreadSnapshotQuery__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ThreadSnapshotQuery class]
                                     rootClass:[QueryRoot class]
                                          file:QueryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ThreadSnapshotQuery__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
