// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mobile.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Mobile.pbobjc.h"
#import "Query.pbobjc.h"
#import "Message.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MobileRoot

@implementation MobileRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MobileRoot_FileDescriptor

static GPBFileDescriptor *MobileRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MobileEventType

GPBEnumDescriptor *MobileEventType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "NodeStart\000NodeOnline\000NodeStop\000AccountUpd"
        "ate\000ThreadUpdate\000Notification\000QueryRespo"
        "nse\000CafeSyncGroupUpdate\000CafeSyncGroupCom"
        "plete\000CafeSyncGroupFailed\000";
    static const int32_t values[] = {
        MobileEventType_NodeStart,
        MobileEventType_NodeOnline,
        MobileEventType_NodeStop,
        MobileEventType_AccountUpdate,
        MobileEventType_ThreadUpdate,
        MobileEventType_Notification,
        MobileEventType_QueryResponse,
        MobileEventType_CafeSyncGroupUpdate,
        MobileEventType_CafeSyncGroupComplete,
        MobileEventType_CafeSyncGroupFailed,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MobileEventType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MobileEventType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MobileEventType_IsValidValue(int32_t value__) {
  switch (value__) {
    case MobileEventType_NodeStart:
    case MobileEventType_NodeOnline:
    case MobileEventType_NodeStop:
    case MobileEventType_AccountUpdate:
    case MobileEventType_ThreadUpdate:
    case MobileEventType_Notification:
    case MobileEventType_QueryResponse:
    case MobileEventType_CafeSyncGroupUpdate:
    case MobileEventType_CafeSyncGroupComplete:
    case MobileEventType_CafeSyncGroupFailed:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MobileWalletAccount

@implementation MobileWalletAccount

@dynamic seed;
@dynamic address;

typedef struct MobileWalletAccount__storage_ {
  uint32_t _has_storage_[1];
  NSString *seed;
  NSString *address;
} MobileWalletAccount__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seed",
        .dataTypeSpecific.className = NULL,
        .number = MobileWalletAccount_FieldNumber_Seed,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MobileWalletAccount__storage_, seed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.className = NULL,
        .number = MobileWalletAccount_FieldNumber_Address,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MobileWalletAccount__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MobileWalletAccount class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MobileWalletAccount__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MobileQueryEvent

@implementation MobileQueryEvent

@dynamic id_p;
@dynamic type;
@dynamic hasData_p, data_p;
@dynamic hasError, error;

typedef struct MobileQueryEvent__storage_ {
  uint32_t _has_storage_[1];
  MobileQueryEvent_Type type;
  NSString *id_p;
  QueryResult *data_p;
  Error *error;
} MobileQueryEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MobileQueryEvent_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MobileQueryEvent__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = MobileQueryEvent_Type_EnumDescriptor,
        .number = MobileQueryEvent_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MobileQueryEvent__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(QueryResult),
        .number = MobileQueryEvent_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MobileQueryEvent__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "error",
        .dataTypeSpecific.className = GPBStringifySymbol(Error),
        .number = MobileQueryEvent_FieldNumber_Error,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MobileQueryEvent__storage_, error),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MobileQueryEvent class]
                                     rootClass:[MobileRoot class]
                                          file:MobileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MobileQueryEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MobileQueryEvent_Type_RawValue(MobileQueryEvent *message) {
  GPBDescriptor *descriptor = [MobileQueryEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MobileQueryEvent_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetMobileQueryEvent_Type_RawValue(MobileQueryEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [MobileQueryEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MobileQueryEvent_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum MobileQueryEvent_Type

GPBEnumDescriptor *MobileQueryEvent_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Data\000Done\000Error\000";
    static const int32_t values[] = {
        MobileQueryEvent_Type_Data,
        MobileQueryEvent_Type_Done,
        MobileQueryEvent_Type_Error,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MobileQueryEvent_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MobileQueryEvent_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MobileQueryEvent_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case MobileQueryEvent_Type_Data:
    case MobileQueryEvent_Type_Done:
    case MobileQueryEvent_Type_Error:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
