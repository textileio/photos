# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Runs all the tests"
  lane :test do
    scan(
      scheme: "Textile",
      xcargs: "-UseModernBuildSystem=NO"
    )
  end

  desc "Push internal test build to Fabric"
  lane :adhoc do
    APP_ID = "io.textile.Wallet.beta"
    PROFILE = "match AdHoc io.textile.Wallet.beta"
    settings_to_override = {
      :PROVISIONING_PROFILE_SPECIFIER => PROFILE
    }
    match(type: "adhoc")
    increment_build_number(
      build_number: ENV['CIRCLE_BUILD_NUM'],
      xcodeproj: "Textile.xcodeproj"
    )
    gym(
      workspace: "Textile.xcworkspace",
      scheme: "Textile",
      xcargs: settings_to_override,
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
            APP_ID => PROFILE
        }
      }
    )
    crashlytics(
      api_token: ENV['FABRIC_API_TOKEN'],
      build_secret: ENV['FABRIC_BUILD_SECRET'],
      groups: 'textile-internal'
    )
    upload_symbols_to_crashlytics(
      binary_path: "./Fabric.framework/uploadDSYM",
      dsym_path: "./Textile.app.dSYM.zip",
      api_token: ENV['FABRIC_API_TOKEN']
    )
  end

  desc "Push a new beta build to TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # Config that came from
    # https://raw.githubusercontent.com/CircleCI-Public/circleci-demo-react-native/master/ios/fastlane/Fastfile
    # -----------------------------------------------------------------------------------------------------------
    match(type: "appstore") # more information: https://codesigning.guide
    #gym # Build your app - more options available
    #pilot
    ## sh "your_script.sh"
    ## You can also use other beta testing services here (run `fastlane actions`)

    # Config that came with fastlane init
    # ----------------------------------------------------------------------------
    versionNumber = get_version_number
    newBuildNumber = app_store_build_number(live: false, version: versionNumber) + 1
    increment_build_number(
      build_number: newBuildNumber,
      xcodeproj: "Textile.xcodeproj"
    )
    gym(workspace: "Textile.xcworkspace", scheme: "Textile", xcargs: "-UseModernBuildSystem=NO")
    # changelog_from_git_commits
    upload_to_testflight(skip_waiting_for_build_processing: true)
    upload_symbols_to_crashlytics(dsym_path: "./Textile.app.dSYM.zip", api_token: ENV['FABRIC_API_TOKEN'])
    add_git_tag(tag: "builds/iosbeta/" + versionNumber.to_s + "(" + newBuildNumber.to_s + ")")
    push_to_git_remote
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    APP_ID = "io.textile.Wallet"
    PROFILE = "match AppStore io.textile.Wallet"
    settings_to_override = {
      :PROVISIONING_PROFILE_SPECIFIER => PROFILE
    }
    match(type: "appstore") # more information: https://codesigning.guide
    # set_info_plist_value(path: "./Textile/Info.plist", key: "UIFileSharingEnabled", value: false)
    tag = ENV['CIRCLE_TAG'] # looks like ios_1.2.3_456
    parts = tag.split("_")
    increment_version_number(
      version_number: parts[1],
      xcodeproj: "Textile.xcodeproj"
    )
    increment_build_number(
      build_number: parts[2],
      xcodeproj: "Textile.xcodeproj"
    )
    gym(
      workspace: "Textile.xcworkspace",
      scheme: "Textile",
      xcargs: settings_to_override,
      export_options: {
        provisioningProfiles: {
            APP_ID => PROFILE
        }
      }
    )
    upload_symbols_to_crashlytics(
      binary_path: "./Fabric.framework/uploadDSYM",
      dsym_path: "./Textile.app.dSYM.zip",
      api_token: ENV['FABRIC_API_TOKEN']
    )
    deliver(
      force: true,
      app_version: parts[1],
      skip_app_version_update: false
    )
  end

  desc "Register new device"
  lane :register_new_device do  |options|
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(type: "adhoc", force_for_new_devices: true)
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
