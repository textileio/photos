# this should be the folder name under `ios` for your project
project_name = 'Textile'

desc "Downloads configuration files"
lane :download_config do
	sh('../scripts/download-config.sh `dirname $PWD`')
end

# NOTE: This is meant to be run on CI where it changes everything before building the app.
# Usage:
#   `RN_RELEASE_TYPE=beta fastlane prep_release` (on CI these ENV variables should be set via the UI)
desc "Updates the app identifier, display name for dev, adhoc, and prod releases"
lane :prep_release do
  # beta, prod
  type = ENV['RN_RELEASE_TYPE'] || 'prod'
  suffix = ENV['RN_BUNDLE_SUFFIX'] || type
  suffix = suffix.length > 0 ? ".#{suffix}" : suffix
  scheme = ENV['RN_URL_SCHEME'] || 'textile'

  # assumes identifier is defined in Appfile
  app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  new_app_id = "#{app_id}#{suffix}"

  # update the app identifier and bundle
  UI.message "\n\nSetting app identifier to: #{new_app_id}"

  display_name = ENV['RN_DISPLAY_NAME'] || type.capitalize

  # update ios indentifier
  update_app_identifier(
    xcodeproj: "./ios/#{project_name}.xcodeproj",
    plist_path: "#{project_name}/Info.plist",
    app_identifier: new_app_id
  )
  update_info_plist(
    plist_path: "#{project_name}/Info.plist",
    xcodeproj: "./ios/#{project_name}.xcodeproj",
    display_name: display_name,
    app_identifier: new_app_id
  )

  # update android suffix
  set_value_in_build(
    app_project_dir: "./android/app",
    key: "applicationIdSuffix",
    value: "#{suffix}"
  )

  # update android display name
  update_android_strings(
    block: lambda { |strings|
      strings['app_name'] = display_name
    }
  )

  # update ios url scheme
  update_url_schemes(
    path: "./ios/#{project_name}/Info.plist",
    url_schemes: ["#{scheme}"]
  )

  # update android url scheme
  find_replace_string(
    path_to_file: "./android/app/src/main/AndroidManifest.xml",
    old_string: "textile-dev",
    new_string: "#{scheme}"
  )
end
