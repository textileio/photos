version: 2.1
jobs:
    lint:
        working_directory: ~/textile-mobile
        docker:
            - image: circleci/node:8
        steps:
            - restore_cache: # If any cache exists, it'll way speedup these checkouts
                keys:
                    - source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                    - source-v2-{{ arch }}-{{ .Branch }}-
                    - source-v2-{{ arch }}-

            - checkout

            - save_cache:
                key: source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ".git"

            - restore_cache:
                key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v1-{{ checksum "package.json" }}-{{ arch }}

            - run: yarn install

            - run:
                name: js lint
                command: |
                    mkdir -p lint-results/junit
                    yarn lint -- --format junit -o reports/junit/js-lint-results.xml
            - store_test_results:
                path: lint-results/junit
            - store_artifacts:
                path: lint-results/junit

            - run:
                name: ts lint
                command: |
                    yarn tslint

            # cache our yarn cache
            - save_cache:
                key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
                paths:
                    - ~/.cache/yarn

            # cache our node_modules
            - save_cache:
                key: node-v1-{{ checksum "package.json" }}-{{ arch }}
                paths:
                    - node_modules
    tests:
        working_directory: ~/textile-mobile
        docker:
            - image: circleci/node:8
        steps:
            - restore_cache: # If any cache exists, it'll way speedup these checkouts
                keys:
                    - source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                    - source-v2-{{ arch }}-{{ .Branch }}-
                    - source-v2-{{ arch }}-

            - checkout

            - save_cache:
                key: source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ".git"

            - restore_cache:
                key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v1-{{ checksum "package.json" }}-{{ arch }}

            - run: yarn install

            - run:
                name: jest tests
                command: |
                    mkdir -p test-results/jest
                    yarn run test
                environment:
                    JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

            - store_test_results:
                path: test-results

            - store_artifacts:
                path: test-results

    android:
        environment:
            LC_ALL: en_US.UTF-8
            LANG: en_US.UTF-8
        working_directory: ~/textile-mobile
        docker:
            - image: circleci/android:api-26-node8-alpha
        resource_class: large
        steps:
            - restore_cache: # If any cache exists, it'll way speedup these checkouts
                keys:
                    - source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                    - source-v2-{{ arch }}-{{ .Branch }}-
                    - source-v2-{{ arch }}-

            - checkout:
                path: ~/textile-mobile

            - save_cache:
                key: source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ".git"

            - restore_cache:
                key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v1-{{ checksum "package.json" }}-{{ arch }}

            - run: yarn install

            - restore_cache:
                key: bundle-v1-{{ checksum "android/Gemfile.lock" }}-{{ arch }}

            - run:
                command: bundle install
                working_directory: android

            - save_cache:
                key: bundle-v1-{{ checksum "android/Gemfile.lock" }}-{{ arch }}
                paths:
                    - vendor/bundle

            - run:
                name: fastlane tests
                working_directory: android
                command: |
                    mkdir -p test-results/fastlane
                    bundle exec fastlane test
                    mv fastlane/report.xml test-results/fastlane

            - store_test_results:
                path: android/test-results

            - store_artifacts:
                path: android/test-results

    android-adhoc:
        environment:
            LC_ALL: en_US.UTF-8
            LANG: en_US.UTF-8
        working_directory: ~/textile-mobile
        docker:
            - image: circleci/android:api-26-node8-alpha
        resource_class: large
        steps:
            - restore_cache: # If any cache exists, it'll way speedup these checkouts
                keys:
                    - source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                    - source-v2-{{ arch }}-{{ .Branch }}-
                    - source-v2-{{ arch }}-

            - checkout:
                path: ~/textile-mobile

            - save_cache:
                key: source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ".git"

            - restore_cache:
                key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v1-{{ checksum "package.json" }}-{{ arch }}

            - run: yarn install

            - restore_cache:
                key: bundle-v1-{{ checksum "android/Gemfile.lock" }}-{{ arch }}

            - run:
                command: bundle install
                working_directory: android

            - save_cache:
                key: bundle-v1-{{ checksum "android/Gemfile.lock" }}-{{ arch }}
                paths:
                    - vendor/bundle

            - run:
                command: echo $ANDROID_KEYSTORE_BASE64 | base64 --decode >> $ANDROID_KEYSTORE
                working_directory: android

            - run:
                command: echo $TEXTILE_ENV_CONTENTS_BASE64 | base64 --decode > .env.production

            - run:
                command: bundle exec fastlane adhoc
                working_directory: android

            - store_artifacts:
                path: ./android/sourcemap.js

    android-release:
        environment:
            LC_ALL: en_US.UTF-8
            LANG: en_US.UTF-8
        working_directory: ~/textile-mobile
        docker:
            - image: circleci/android:api-26-node8-alpha
        resource_class: large
        steps:
            - checkout:
                path: ~/textile-mobile

            - restore_cache:
                key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v1-{{ checksum "package.json" }}-{{ arch }}

            - run: yarn install

            - restore_cache:
                key: bundle-v1-{{ checksum "android/Gemfile.lock" }}-{{ arch }}

            - run:
                command: bundle install
                working_directory: android

            - save_cache:
                key: bundle-v1-{{ checksum "android/Gemfile.lock" }}-{{ arch }}
                paths:
                    - vendor/bundle

            - run:
                command: echo $ANDROID_KEYSTORE_BASE64 | base64 --decode >> $ANDROID_KEYSTORE
                working_directory: android

            - run:
                command: echo $TEXTILE_ENV_CONTENTS_BASE64 | base64 --decode > .env.production

            - run:
                command: bundle exec fastlane release
                working_directory: android

            - store_artifacts:
                path: ./android/sourcemap.js

    ios:
        macos:
            xcode: "10.0.0"
        environment:
            LC_ALL: en_US.UTF-8
            LANG: en_US.UTF-8
        working_directory: ~/textile-mobile

        # use a --login shell so our "set Ruby version" command gets picked up for later steps
        shell: /bin/bash --login -o pipefail

        steps:
            - restore_cache: # If any cache exists, it'll way speedup these checkouts
                keys:
                    - source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                    - source-v2-{{ arch }}-{{ .Branch }}-
                    - source-v2-{{ arch }}-

            - checkout

            - save_cache:
                key: source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ".git"

            - run:
                name: set Ruby version
                command:  echo "ruby-2.4" > ~/.ruby-version

            - restore_cache:
                key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v2-{{ checksum "package.json" }}-{{ arch }}

            # not using a workspace here as Node and Yarn versions
            # differ between our macOS executor image and the Docker containers above
            - run: yarn install --ignore-engines

            - save_cache:
                key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}
                paths:
                    - ~/.cache/yarn

            - save_cache:
                key: node-v2-{{ checksum "package.json" }}-{{ arch }}
                paths:
                    - node_modules

            - restore_cache:
                key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

            - run:
                command: bundle install
                working_directory: ios

            - save_cache:
                key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
                paths:
                    - vendor/bundle

            - run:
                command: bundle exec fastlane test
                working_directory: ios

            - run:
                name: set up test results
                working_directory: ios
                when: always
                command: |
                    mkdir -p test-results/fastlane test-results/xcode
                    mv fastlane/report.xml test-results/fastlane
                    mv fastlane/test_output/report.junit test-results/xcode/junit.xml

            - store_test_results:
                path: ios/test-results

            - store_artifacts:
                path: ios/test-results

    ios-adhoc:
        macos:
            xcode: "10.0.0"
        environment:
            LC_ALL: en_US.UTF-8
            LANG: en_US.UTF-8
        working_directory: ~/textile-mobile

        # use a --login shell so our "set Ruby version" command gets picked up for later steps
        shell: /bin/bash --login -o pipefail

        steps:
            - run:
                name: set Ruby version
                command:  echo "ruby-2.4" > ~/.ruby-version

            - restore_cache: # If any cache exists, it'll way speedup these checkouts
                keys:
                    - source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                    - source-v2-{{ arch }}-{{ .Branch }}-
                    - source-v2-{{ arch }}-

            - checkout

            - save_cache:
                key: source-v2-{{ arch }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - ".git"

            - run: git config --global user.name $CIRCLE_USERNAME
            - run: git config --global user.email "ops@textile.io" # TODO: Use a variable here
            - run: git branch --set-upstream-to=origin/$CIRCLE_BRANCH $CIRCLE_BRANCH

            - restore_cache:
                key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v2-{{ checksum "package.json" }}-{{ arch }}

            # not using a workspace here as Node and Yarn versions
            # differ between our macOS executor image and the Docker containers above
            - run: yarn install --ignore-engines

            - save_cache:
                key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}
                paths:
                    - ~/.cache/yarn

            - save_cache:
                key: node-v2-{{ checksum "package.json" }}-{{ arch }}
                paths:
                    - node_modules

            - restore_cache:
                key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

            - run:
                command: bundle install
                working_directory: ios

            - save_cache:
                key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
                paths:
                    - vendor/bundle

            - run:
                command: echo $TEXTILE_ENV_CONTENTS_BASE64 | base64 --decode > .env.production

            - run:
                command: bundle exec fastlane adhoc
                working_directory: ios

            - store_artifacts:
                path: ./ios/TextilePhotos.app.dSYM.zip

            - store_artifacts:
                path: ./ios/TextilePhotos.ipa

            - store_artifacts:
                path: ./ios/sourcemap.js

    ios-release:
        macos:
            xcode: "10.0.0"
        environment:
            LC_ALL: en_US.UTF-8
            LANG: en_US.UTF-8
        working_directory: ~/textile-mobile

        # use a --login shell so our "set Ruby version" command gets picked up for later steps
        shell: /bin/bash --login -o pipefail

        steps:
            - run:
                name: set Ruby version
                command:  echo "ruby-2.4" > ~/.ruby-version

            - checkout

            - restore_cache:
                key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}

            - restore_cache:
                key: node-v2-{{ checksum "package.json" }}-{{ arch }}

            # not using a workspace here as Node and Yarn versions
            # differ between our macOS executor image and the Docker containers above
            - run: yarn install --ignore-engines

            - save_cache:
                key: yarn-v2-{{ checksum "yarn.lock" }}-{{ arch }}
                paths:
                    - ~/.cache/yarn

            - save_cache:
                key: node-v2-{{ checksum "package.json" }}-{{ arch }}
                paths:
                    - node_modules

            - restore_cache:
                key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}

            - run:
                command: bundle install
                working_directory: ios

            - save_cache:
                key: bundle-v1-{{ checksum "ios/Gemfile.lock" }}-{{ arch }}
                paths:
                    - vendor/bundle

            - run:
                command: echo $TEXTILE_ENV_CONTENTS_BASE64 | base64 --decode > .env.production

            - run:
                command: bundle exec fastlane release
                working_directory: ios

            - store_artifacts:
                path: ./ios/TextilePhotos.app.dSYM.zip

            - store_artifacts:
                path: ./ios/TextilePhotos.ipa

            - store_artifacts:
                path: ./ios/sourcemap.js

workflows:
    version: 2
    lint-tests-android-ios:
        jobs:
            - lint:
                filters:
                    branches:
                        ignore:
                            - master
            - tests:
                filters:
                    branches:
                        ignore:
                            - master
            - android:
                requires:
                    - lint
                    - tests
                filters:
                    branches:
                        ignore:
                            - master
            - ios:
                requires:
                    - lint
                    - tests
                filters:
                    branches:
                        ignore:
                            - master
            - ios-adhoc:
                filters:
                    branches:
                        only:
                            - master
            - android-adhoc:
                filters:
                    branches:
                        only:
                            - master
            - ios-release:
                filters:
                    tags:
                        only: /^ios_[0-9.]+_[0-9]+/
                    branches:
                        ignore: /.*/
            - android-release:
                filters:
                    tags:
                        only: /^android_[0-9.]+_[0-9]+/
                    branches:
                        ignore: /.*/
