import PushNotification from 'react-native-push-notification'
import { PushNotificationIOS } from 'react-native'
import * as TextileTypes from '../Models/TextileTypes'

export interface NotificationsPayload {
  title: string,
  message: string,
  category: string
}
function notificationToPayload(notification: TextileTypes.Notification): NotificationsPayload {
  const category = TextileTypes.NotificationType[notification.type] as string
  switch (notification.type) {
    case(0): {
      const actor = notification.actor_username || notification.actor_username.substring(0, 6)
      const target = notification.category && notification.category != ' to a new Thread ' ? ' to ' + notification.category : ''
      return {
        title: "New Invite",
        message: actor + " sent you an invite" + target,
        category
      }
    }
    case(1): {
      return {
        title: "New Device",
        message: "A new device has paired with your wallet",
        category
      }
    }
    case(2): {
      const actor = notification.actor_username || notification.actor_username.substring(0, 6)
      const target = notification.category && notification.category != '' ? ' in ' + notification.category : ''
      return {
        title: "New Photo",
        message: actor + " sent you a new photo" + target,
        category
      }
    }
    case(3): {
      const actor = notification.actor_username || notification.actor_username.substring(0, 6)
      return {
        title: "New comment",
        message: actor + " commented on a photo",
        category
      }
    }
    case(4): {
      const actor = notification.actor_username || notification.actor_username.substring(0, 6)
      return {
        title: "New like",
        message: actor + " liked a photo",
        category
      }
    }
    case(5): {
      const actor = notification.actor_username || notification.actor_username.substring(0, 6)
      const target = notification.category && notification.category != ' a thread' ? ' ' + notification.category : ''
      return {
        title: "New Peer",
        message: actor + " joined" + target,
        category
      }
    }
    case(6): {
      const actor = notification.actor_username || notification.actor_username.substring(0, 6)
      const target = notification.category && notification.category != ' a thread' ? ' ' + notification.category : ''
      return {
        title: "Peer left",
        message: actor + " left" + target,
        category
      }
    }
    default: {
      return {
        title: '',
        message: '',
        category: 'unknown'
      }
    }
  }
}

export async function newLocalNotification(notification: TextileTypes.Notification): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      setTimeout(function(){
        const payload = notificationToPayload(notification)
        PushNotification.localNotification({
          title: payload.title,
          message: payload.message,
          /* Android Only Property */
          group: payload.category, // (optional) add group to message
          /* iOS Only Property */
          category: payload.category, // (optional) default: null
          userInfo: { notification },

          /* Android Only Properties */
          //id: '22', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
          //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
          //ticker: "My Notification Ticker", // (optional)
          //bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
          //subText: "This is a subText", // (optional) default: none

          /* iOS only properties */
          //alertAction: // (optional) default: view
        })
      }, 2000)
    } catch (error) {
      console.log(error)
    }
  })
}

export async function enable(): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      PushNotification.configure({
        // (required) Called when a remote or local notification is opened or received
        onNotification:   function(notification: any) {
          if (notification.userInteraction === true) {
            console.log('success', notification)
          }
          notification.finish(PushNotificationIOS.FetchResult.NoData);
        },

        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,

        /**
         * (optional) default: true
         * - Specified if permissions (ios) and token (android and ios) will requested or not,
         * - if not, you must call PushNotificationsHandler.requestPermissions() later
         */
        requestPermissions: true,
      })
      resolve()
    } catch (error) {
      console.log(error)
      reject(error)
    }
  })
}
