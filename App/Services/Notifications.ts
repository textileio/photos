import PushNotification from 'react-native-push-notification'
import * as TextileTypes from '../Models/TextileTypes'

export interface NotificationsPayload {
  title: string,
  message: string,
  category: string
}

function getAddressable (notification: TextileTypes.Notification) : string {
  let actor = notification.actor_username || notification.actor_username.substring(0, 6)
  if (!actor || actor === '') {
    actor = 'Someone'
  }
  return actor
}

function notificationToPayload(notification: TextileTypes.Notification): NotificationsPayload {
  const category = TextileTypes.NotificationType[notification.type] as string
  switch (notification.type) {
    case(0): {
      const actor = getAddressable(notification)
      const target = notification.category && notification.category != ' to a new Thread ' ? ' to ' + notification.category : ''
      return {
        title: "New Invite",
        message: actor + " sent you an invite" + target,
        category
      }
    }
    case(1): {
      return {
        title: "New Device",
        message: "A new device has paired with your wallet",
        category
      }
    }
    case(2): {
      const actor = getAddressable(notification)
      const target = notification.category && notification.category != '' ? ' in ' + notification.category : ''
      return {
        title: "New Photo",
        message: actor + " sent you a new photo" + target,
        category
      }
    }
    case(3): {
      const actor = getAddressable(notification)
      return {
        title: "New comment",
        message: actor + " commented on a photo",
        category
      }
    }
    case(4): {
      const actor = getAddressable(notification)
      return {
        title: "New like",
        message: actor + " liked a photo",
        category
      }
    }
    case(5): {
      const actor = getAddressable(notification)
      const target = notification.category && notification.category != ' a thread' ? ' ' + notification.category : ''
      return {
        title: "New Peer",
        message: actor + " joined" + target,
        category
      }
    }
    case(6): {
      const actor = getAddressable(notification)
      const target = notification.category && notification.category != ' a thread' ? ' ' + notification.category : ''
      return {
        title: "Peer left",
        message: actor + " left" + target,
        category
      }
    }
    default: {
      return {
        title: '',
        message: '',
        category: 'unknown'
      }
    }
  }
}

export async function newLocalNotification(notification: TextileTypes.Notification): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      const payload = notificationToPayload(notification)
      PushNotification.localNotification({
        title: payload.title,
        message: payload.message,
        /* Android Only Property */
        group: payload.category, // (optional) add group to message
        /* iOS Only Property */
        category: payload.category, // (optional) default: null
        userInfo: { notification },

        /* Android Only Properties */
        //id: '22', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
        //ticker: "My Notification Ticker", // (optional)
        //bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        //subText: "This is a subText", // (optional) default: none

        /* iOS only properties */
        // alertAction: 'view' // (optional) default: view
        playSound: false
      })
    } catch (error) {
      // nothing to do
    }
  })
}

export async function enable(): Promise<void> {
  return new Promise<void>((resolve, reject) => {
    try {
      PushNotification.requestPermissions()
      resolve()
    } catch (error) {
      reject(error)
    }
  })
}
